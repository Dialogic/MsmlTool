/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.dialogic.msmltool;

import gov.nist.javax.sip.header.CSeq;
import java.awt.HeadlessException;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.net.Inet4Address;
import java.net.URL;
import java.net.UnknownHostException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sip.address.Address;
import javax.sip.header.CSeqHeader;
import javax.sip.header.FromHeader;
import javax.sip.header.ToHeader;
import javax.sip.message.Request;
import javax.sip.message.Response;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.DefaultCaret;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.w3c.dom.DOMException;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

/**
 *
 * @author ssatyana
 */
public class CallUIForm extends javax.swing.JFrame {

    static final Logger logger = Logger.getLogger(CallUIForm.class.getName());
    MsmlApp app;
    static private Map<String, String> rtpdumpMap = new LinkedHashMap<>();
    private String port = "";
    private String ipAdr = "";

    /**
     * Creates new form CallForm
     */
    private CallUIForm(MsmlApp msmlApp) {
        this.app = msmlApp;
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, ex.getMessage(), ex);
        }
        initComponents();
        this.setVisible(true);
        this.setLocationRelativeTo(null);
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        hangupButton.setEnabled(false);
        userText.setText("msml");
        addressText.setText(ReadFileUtility.getValue("baseurl"));
        displayInitialMessage();

        this.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent windowEvent) {
                msmlApp.close();
            }
        });
    }

    public static CallUIForm initialize(MsmlApp msmlApp) {
        CallUIForm callForm = new CallUIForm(msmlApp);
        callForm.setVisible(true);
        callForm.setLocationRelativeTo(null);
        return callForm;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addressText = new javax.swing.JTextField();
        addressLabel = new javax.swing.JLabel();
        callButton = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        callPanel = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        callTextArea = new javax.swing.JTextArea();
        rtpPlay = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        rtpdumpTable = new javax.swing.JTable();
        uploadFile = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        msmlScriptLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        msmlTextArea = new javax.swing.JTextArea();
        responseLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        responseTextArea = new javax.swing.JTextArea();
        fileButton = new javax.swing.JButton();
        sendMsmlButton = new javax.swing.JButton();
        fileTextField = new javax.swing.JTextField();
        clearButton = new javax.swing.JButton();
        clearResponseButton = new javax.swing.JButton();
        saveMsmlScriptButton = new javax.swing.JButton();
        saveResponseButton = new javax.swing.JButton();
        msmlComboBox = new javax.swing.JComboBox();
        userText = new javax.swing.JTextField();
        userLabel = new javax.swing.JLabel();
        hangupButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("CallUserInterface");

        addressLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        addressLabel.setForeground(new java.awt.Color(0, 0, 153));
        addressLabel.setText("IP Address");

        callButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/dialogic/msmltool/images/call.png"))); // NOI18N
        callButton.setText("Call");
        callButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                callButtonActionPerformed(evt);
            }
        });

        callTextArea.setColumns(20);
        callTextArea.setRows(5);
        jScrollPane3.setViewportView(callTextArea);

        rtpPlay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/dialogic/msmltool/images/play.png"))); // NOI18N
        rtpPlay.setText(" Rtp Play");
        rtpPlay.setActionCommand("RtpPlay");
        rtpPlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rtpPlayActionPerformed(evt);
            }
        });

        rtpdumpTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Rtpdump File Table"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(rtpdumpTable);

        uploadFile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/dialogic/msmltool/images/uploadfile.png"))); // NOI18N
        uploadFile.setText("Upload File");
        uploadFile.setActionCommand("RtpPlay");
        uploadFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadFileActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout callPanelLayout = new javax.swing.GroupLayout(callPanel);
        callPanel.setLayout(callPanelLayout);
        callPanelLayout.setHorizontalGroup(
            callPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(callPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(callPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 529, Short.MAX_VALUE)
                    .addGroup(callPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(callPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(uploadFile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(rtpPlay, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        callPanelLayout.setVerticalGroup(
            callPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(callPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(callPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(callPanelLayout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(uploadFile)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rtpPlay))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, callPanelLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Call Flow", callPanel);

        msmlScriptLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        msmlScriptLabel.setForeground(new java.awt.Color(0, 0, 153));
        msmlScriptLabel.setText("MSML Script");

        msmlTextArea.setColumns(20);
        msmlTextArea.setRows(5);
        jScrollPane1.setViewportView(msmlTextArea);

        responseLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        responseLabel.setForeground(new java.awt.Color(0, 0, 153));
        responseLabel.setText("Received Response");

        responseTextArea.setColumns(20);
        responseTextArea.setRows(5);
        jScrollPane2.setViewportView(responseTextArea);

        fileButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/dialogic/msmltool/images/choose.png"))); // NOI18N
        fileButton.setText("ChooseFile");
        fileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileButtonActionPerformed(evt);
            }
        });

        sendMsmlButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/dialogic/msmltool/images/send.png"))); // NOI18N
        sendMsmlButton.setText("Send");
        sendMsmlButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendMsmlButtonActionPerformed(evt);
            }
        });

        clearButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/dialogic/msmltool/images/clear.png"))); // NOI18N
        clearButton.setText("Clear");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        clearResponseButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/dialogic/msmltool/images/clear.png"))); // NOI18N
        clearResponseButton.setText("Clear");
        clearResponseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearResponseButtonActionPerformed(evt);
            }
        });

        saveMsmlScriptButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/dialogic/msmltool/images/save.png"))); // NOI18N
        saveMsmlScriptButton.setText("Save");
        saveMsmlScriptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMsmlScriptButtonActionPerformed(evt);
            }
        });

        saveResponseButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/dialogic/msmltool/images/save.png"))); // NOI18N
        saveResponseButton.setText("Save");
        saveResponseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveResponseButtonActionPerformed(evt);
            }
        });

        msmlComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "None Selected", "Play", "Record", "CreateAudioConf", "CreateVideoConf", "JoinVideoConf", "UnjoinVideoStream", "UnjoinConf", "DeleteConf", "SimpleIVR" }));
        msmlComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                msmlComboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(clearButton)
                                .addGap(18, 18, 18)
                                .addComponent(saveMsmlScriptButton)
                                .addGap(18, 18, 18)
                                .addComponent(sendMsmlButton)
                                .addGap(0, 149, Short.MAX_VALUE))
                            .addComponent(fileTextField))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(fileButton, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(msmlComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(clearResponseButton)
                                .addGap(18, 18, 18)
                                .addComponent(saveResponseButton))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(responseLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(msmlScriptLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(3, 3, 3)
                .addComponent(msmlScriptLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(clearButton)
                    .addComponent(saveMsmlScriptButton)
                    .addComponent(msmlComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sendMsmlButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fileTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fileButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(responseLabel)
                .addGap(2, 2, 2)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(clearResponseButton)
                    .addComponent(saveResponseButton))
                .addContainerGap())
        );

        jTabbedPane1.addTab("MSML", jPanel2);

        userText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userTextActionPerformed(evt);
            }
        });

        userLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        userLabel.setForeground(new java.awt.Color(0, 0, 153));
        userLabel.setText("User");

        hangupButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/dialogic/msmltool/images/hangup.png"))); // NOI18N
        hangupButton.setText("Hangup");
        hangupButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hangupButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(userText, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(userLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(addressText, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(callButton, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(hangupButton, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(addressLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(userLabel)
                    .addComponent(addressLabel))
                .addGap(3, 3, 3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(userText, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addressText, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(callButton, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                    .addComponent(hangupButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 468, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.getAccessibleContext().setAccessibleName("Call Flow");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void callButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_callButtonActionPerformed
        try {
            if (userText.getText().isEmpty() || addressText.getText().isEmpty()) {
                JOptionPane.showMessageDialog(new JFrame(), "Please Enter User and XMS IP Address", "Dialog",
                        JOptionPane.ERROR_MESSAGE);
                return;
            }

            DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder docBuilder = docFactory.newDocumentBuilder();

            org.w3c.dom.Document doc = docBuilder.parse("ConnectorConfig.xml");

            org.w3c.dom.Node rootElement = doc.getFirstChild();

            NodeList list = rootElement.getChildNodes();
            for (int i = 0; i < list.getLength(); i++) {
                org.w3c.dom.Node node = list.item(i);
                if ("appid".equalsIgnoreCase(node.getNodeName())) {
                    node.setTextContent(userText.getText());
                }
                if ("baseurl".equalsIgnoreCase(node.getNodeName())) {
                    node.setTextContent(addressText.getText());
                }
            }

            TransformerFactory transformerFactory = TransformerFactory.newInstance();
            Transformer transformer = transformerFactory.newTransformer();
            DOMSource source = new DOMSource(doc);
            StreamResult result = new StreamResult(new File("ConnectorConfig.xml"));
            transformer.setOutputProperty(OutputKeys.INDENT, "yes");
            transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "yes");
            transformer.transform(source, result);

            this.app.makeCall(this.userText.getText(), this.addressText.getText(), null);
            callButton.setEnabled(false);
            hangupButton.setEnabled(true);
            userText.setEnabled(false);
            addressText.setEnabled(false);
        } catch (HeadlessException | ParserConfigurationException | SAXException | IOException | DOMException | IllegalArgumentException | TransformerException ex) {
            Logger.getLogger(CallUIForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_callButtonActionPerformed

    private void userTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userTextActionPerformed
        System.out.println("Entered text" + this.userText.getText());
    }//GEN-LAST:event_userTextActionPerformed

    public String getUser() {
        return this.userText.getText();
    }

    private void hangupButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hangupButtonActionPerformed
        this.app.hangup();
        callButton.setEnabled(true);
        hangupButton.setEnabled(false);
        userText.setEnabled(true);
        addressText.setEnabled(true);
        this.dispose();
        System.exit(0);
    }//GEN-LAST:event_hangupButtonActionPerformed

    private void fileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileButtonActionPerformed
        try {
            JFileChooser chooser = new JFileChooser("");
            chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);

            int returnVal = chooser.showOpenDialog((java.awt.Component) null);
            File inFile = null;
            if (returnVal == chooser.APPROVE_OPTION) {
                // to populate the text field
                chooser.addPropertyChangeListener(JFileChooser.SELECTED_FILE_CHANGED_PROPERTY, new PropertyChangeListener() {
                    public void propertyChange(PropertyChangeEvent evt) {
                        if (JFileChooser.SELECTED_FILE_CHANGED_PROPERTY.equals(evt.getPropertyName())) {
                            JFileChooser chooser = (JFileChooser) evt.getSource();
                            if (chooser.getSelectedFile() != null) {
                                fileTextField.setText(chooser.getSelectedFile().getName());
                            }
                        }
                    }
                });
                inFile = chooser.getSelectedFile();
                System.out.println("Selected File: " + inFile.getAbsolutePath());

                if (this.msmlTextArea.getText() != null) {
                    this.msmlTextArea.setText("");
                }
                // to display the file contents to the msml script text area
                JTextArea text = this.msmlTextArea;
                DefaultCaret caret = (DefaultCaret) msmlTextArea.getCaret();
                caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
                BufferedReader in = new BufferedReader(new FileReader(inFile));

                String line = in.readLine();
                while (line != null) {
                    text.append(line + "\n");
                    line = in.readLine();
                }
            } else if (returnVal == chooser.CANCEL_OPTION) {
                System.out.println("No file selected");
            }
        } catch (IOException ex) {
            logger.log(Level.SEVERE, ex.getMessage(), ex);
        }
    }//GEN-LAST:event_fileButtonActionPerformed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        this.msmlTextArea.setText("");
    }//GEN-LAST:event_clearButtonActionPerformed

    private void clearResponseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearResponseButtonActionPerformed
        this.responseTextArea.setText("");
    }//GEN-LAST:event_clearResponseButtonActionPerformed

    private void saveMsmlScriptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMsmlScriptButtonActionPerformed
        final JFileChooser SaveAs = new JFileChooser();
        SaveAs.setApproveButtonText("Save");
        int actionDialog = SaveAs.showOpenDialog(this);
        if (actionDialog != JFileChooser.APPROVE_OPTION) {
            return;
        }

        File fileName = new File(SaveAs.getSelectedFile() + ".txt");
        BufferedWriter outFile = null;
        try {
            outFile = new BufferedWriter(new FileWriter(fileName));
            this.msmlTextArea.write(outFile);
        } catch (IOException ex) {
            System.out.println(ex);
        } finally {
            if (outFile != null) {
                try {
                    outFile.close();
                } catch (IOException e) {
                    System.out.println(e);
                }
            }
        }
    }//GEN-LAST:event_saveMsmlScriptButtonActionPerformed

    private void sendMsmlButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendMsmlButtonActionPerformed
        DefaultCaret caret = (DefaultCaret) msmlTextArea.getCaret();
        caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
        this.app.sendMsml(this.msmlTextArea.getText());

//        while (Connector.responseMessage != null && Connector.responseMessage.length() > 0) {
//            this.responseTextArea.setText(Connector.responseMessage);
//        }
    }//GEN-LAST:event_sendMsmlButtonActionPerformed

    private void msmlComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_msmlComboBoxActionPerformed
        String itemSelected = (String) msmlComboBox.getSelectedItem();
        switch (itemSelected) {
            case "Play":
                String play = "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n"
                        + "<msml version=\"1.1\" xmlns:ns2=\"http://www.dialogic.com/DialogicTypes\">\n"
                        + "    <dialogstart target=\"conn:1234\" type=\"application/moml+xml\" name=\"Play\">\n"
                        + "        <group topology=\"parallel\">\n"
                        + "            <play>\n"
                        + "                <media>\n"
                        + "                    <audio uri=\"file://verification/greeting.wav\" format=\"audio/wav;codec=L16\" audiosamplerate=\"16000\" audiosamplesize=\"16\"/>\n"
                        + "                </media>\n"
                        + "                <playexit>\n"
                        + "                    <exit namelist=\"play.end play.amt\"/>\n"
                        + "                </playexit>\n"
                        + "            </play>\n"
                        + "            <collect>\n"
                        + "                <pattern digits=\"#\">\n"
                        + "                    <send event=\"TermkeyRecieved\" target=\"source\" namelist=\"dtmf.digits dtmf.len dtmf.end\"/>\n"
                        + "                    <send event=\"terminate\" target=\"play\"/>\n"
                        + "                </pattern>\n"
                        + "            </collect>\n"
                        + "        </group>\n"
                        + "    </dialogstart>\n"
                        + "</msml>";
                msmlTextArea.setText(play);
                break;
            case "Record":
                String record = "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n"
                        + "<msml version=\"1.1\" xmlns:ns2=\"http://www.dialogic.com/DialogicTypes\">\n"
                        + "    <dialogstart target=\"conn:1234\" type=\"application/moml+xml\" name=\"Record\">\n"
                        + "        <group topology=\"parallel\">\n"
                        + "            <record beep=\"true\" audiodest=\"file://recorded/Test.wav\" format=\"audio/wav;codec=L16\" audiosamplerate=\"16000\" audiosamplesize=\"16\" maxtime=\"10s\">\n"
                        + "                <recordexit>\n"
                        + "                    <exit namelist=\"record.end record.len\"/>\n"
                        + "                </recordexit>\n"
                        + "            </record>\n"
                        + "            <collect>\n"
                        + "                <pattern digits=\"#\">\n"
                        + "                    <send event=\"TermkeyRecieved\" target=\"source\" namelist=\"dtmf.digits dtmf.len dtmf.last\"/>\n"
                        + "                    <send event=\"terminate\" target=\"record\"/>\n"
                        + "                </pattern>\n"
                        + "            </collect>\n"
                        + "        </group>\n"
                        + "    </dialogstart>\n"
                        + "</msml>";
                msmlTextArea.setText(record);
                break;
            case "CreateAudioConf":
                String createConferenceAudio = "<msml version=\"1.1\">\n"
                        + "<createconference name=\"XMSConference_1\" deletewhen=\"nomedia\" mark=\"1\" term=\"true\">\n"
                        + "<audiomix id=\"mix12345\"/>\n"
                        + "</createconference>\n"
                        + "<join id1=\"conf:XMSConference_1\" id2=\"conn:1234\" mark=\"2\">\n"
                        + "<stream media=\"audio\"/>\n"
                        + "</join>\n"
                        + "</msml>";
                msmlTextArea.setText(createConferenceAudio);
                break;
            case "CreateVideoConf":
                String createConferenceVideo = "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n"
                        + "<msml version=\"1.1\" xmlns:ns2=\"http://www.dialogic.com/DialogicTypes\">\n"
                        + "    <createconference name=\"XMSConference_1\" deletewhen=\"nomedia\" term=\"true\" mark=\"1\">\n"
                        + "        <videolayout>\n"
                        + "            <root size=\"VGA\"/>\n"
                        + "            <region id=\"1\" left=\"0\" top=\"0\" relativesize=\"1/2\"/>\n"
                        + "            <region id=\"2\" left=\"50%\" top=\"0\" relativesize=\"1/2\"/>\n"
                        + "            <region id=\"3\" left=\"0\" top=\"50%\" relativesize=\"1/2\"/>\n"
                        + "            <region id=\"4\" left=\"50%\" top=\"50%\" relativesize=\"1/2\"/>\n"
                        + "        </videolayout>\n"
                        + "    </createconference>\n"
                        + "</msml>";
                msmlTextArea.setText(createConferenceVideo);
                break;
            case "JoinVideoConf":
                String joinConf = "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n"
                        + "<msml version=\"1.1\" xmlns:ns2=\"http://www.dialogic.com/DialogicTypes\">\n"
                        + "    <join id1=\"conn:1234\" id2=\"conf:XMSConference_1\" mark=\"1\">\n"
                        + "        <stream media=\"audio\"/>\n"
                        + "        <stream display=\"1\" dir=\"from-id1\" media=\"video\"/>\n"
                        + "        <stream dir=\"to-id1\" media=\"video\"/>\n"
                        + "    </join>\n"
                        + "</msml>";
                msmlTextArea.setText(joinConf);
                break;
            case "UnjoinVideoStream":
                String unjoinVideo = "<?xml version=\"1.0\" encoding=\"US-ASCII\"?>\n"
                        + "<msml version=\"1.1\">\n"
                        + "<unjoin id1=\"conn:1234\" id2=\"conf:XMSConference_1\">\n"
                        + "<stream media=\"video\" dir=\"from-id1\"/>\n"
                        + "</unjoin>\n"
                        + "</msml>";
                msmlTextArea.setText(unjoinVideo);
                break;
            case "UnjoinConf":
                String unjoinConf = "<?xml version=\"1.0\" encoding=\"US-ASCII\"?>\n"
                        + "<msml version=\"1.1\">\n"
                        + "<unjoin id1=\"conn:1234\" id2=\"conf:XMSConference_1\"/>\n"
                        + "</msml>";
                msmlTextArea.setText(unjoinConf);
                break;
            case "SimpleIVR":
                String collect = "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n"
                        + "<msml version=\"1.1\" xmlns:ns2=\"http://www.dialogic.com/DialogicTypes\">\n"
                        + "    <dialogstart target=\"conn:1234\" type=\"application/moml+xml\" name=\"Collect\">\n"
                        + "        <group topology=\"parallel\">\n"
                        + "            <play barge=\"true\" cleardb=\"true\">\n"
                        + "                <media>\n"
                        + "                    <audio uri=\"file://verification/play_menu.wav\"/>\n"
                        + "                </media>\n"
                        + "                <playexit>\n"
                        + "                    <send event=\"starttimer\" target=\"collect\"/>\n"
                        + "                </playexit>\n"
                        + "            </play>\n"
                        + "            <collect cleardb=\"true\" fdt=\"20s\" idt=\"2s\" starttimer=\"true\">\n"
                        + "                <pattern digits=\"#\">\n"
                        + "                    <send event=\"termKey\" target=\"source\" namelist=\"dtmf.digits dtmf.len dtmf.end\"/>\n"
                        + "                </pattern>\n"
                        + "                <pattern digits=\"x\"/>\n"
                        + "                <noinput>\n"
                        + "                    <send event=\"noinput\" target=\"source\" namelist=\"dtmf.digits dtmf.len dtmf.end\"/>\n"
                        + "                </noinput>\n"
                        + "                <nomatch>\n"
                        + "                    <send event=\"nomatch\" target=\"source\" namelist=\"dtmf.digits dtmf.len dtmf.end\"/>\n"
                        + "                </nomatch>\n"
                        + "                <dtmfexit>\n"
                        + "                    <send event=\"dtmfexit\" target=\"source\" namelist=\"dtmf.digits dtmf.len dtmf.end\"/>\n"
                        + "                </dtmfexit>\n"
                        + "            </collect>\n"
                        + "        </group>\n"
                        + "    </dialogstart>\n"
                        + "</msml>";
                msmlTextArea.setText(collect);
                break;
            case "DeleteConf":
                String deleteConference = "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n"
                        + "<msml version=\"1.1\" xmlns:ns2=\"http://www.dialogic.com/DialogicTypes\">\n"
                        + "    <destroyconference id=\"conf:XMSConference_1\" mark=\"1\" />\n"
                        + "</msml>";
                msmlTextArea.setText(deleteConference);
                break;
            default:
                // no item selected
                break;
        }
    }//GEN-LAST:event_msmlComboBoxActionPerformed

    private void saveResponseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveResponseButtonActionPerformed
        final JFileChooser SaveAs = new JFileChooser();
        SaveAs.setApproveButtonText("Save");
        int actionDialog = SaveAs.showOpenDialog(this);
        if (actionDialog != JFileChooser.APPROVE_OPTION) {
            return;
        }

        File fileName = new File(SaveAs.getSelectedFile() + ".txt");
        BufferedWriter outFile = null;
        try {
            outFile = new BufferedWriter(new FileWriter(fileName));
            this.responseTextArea.write(outFile);
        } catch (IOException ex) {
            System.out.println(ex);
        } finally {
            if (outFile != null) {
                try {
                    outFile.close();
                } catch (IOException e) {
                    System.out.println(e);
                }
            }
        }
    }//GEN-LAST:event_saveResponseButtonActionPerformed

    private void uploadFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadFileActionPerformed
        try {
            JFileChooser chooser = new JFileChooser("");
            chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);

            int returnVal = chooser.showOpenDialog((java.awt.Component) null);
            File inFile = null;
            if (returnVal == chooser.APPROVE_OPTION) {
                // to populate the text field
                chooser.addPropertyChangeListener(JFileChooser.SELECTED_FILE_CHANGED_PROPERTY, new PropertyChangeListener() {
                    public void propertyChange(PropertyChangeEvent evt) {
                        if (JFileChooser.SELECTED_FILE_CHANGED_PROPERTY.equals(evt.getPropertyName())) {
                            JFileChooser chooser = (JFileChooser) evt.getSource();
                            if (chooser.getSelectedFile() != null) {
                                fileTextField.setText(chooser.getSelectedFile().getName());
                            }
                        }
                    }
                });
                inFile = chooser.getSelectedFile();
                System.out.println("Selected File: " + inFile.getAbsolutePath());

                DefaultTableModel model = (DefaultTableModel) this.rtpdumpTable.getModel();
                rtpdumpTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

                model.addRow(new Object[]{chooser.getSelectedFile().getName()});
                rtpdumpMap.put(chooser.getSelectedFile().getName(), inFile.getAbsolutePath());

            } else if (returnVal == chooser.CANCEL_OPTION) {
                System.out.println("No file selected");
            }
        } catch (Exception ex) {
            logger.log(Level.SEVERE, ex.getMessage(), ex);
        }
    }//GEN-LAST:event_uploadFileActionPerformed

    private void rtpPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rtpPlayActionPerformed
        try {
            if (this.callTextArea.getText().contains("ACK")) {
                if (this.rtpdumpTable.getRowCount() <= 0) {
                    JOptionPane.showMessageDialog(new JFrame(), "Please upload a file to be played", "Dialog",
                            JOptionPane.ERROR_MESSAGE);
                    return;
                } else {
                    int selectedrow = this.rtpdumpTable.getSelectedRow();
                    if (selectedrow == -1) {
                        JOptionPane.showMessageDialog(new JFrame(), "Please select a file from the table", "Dialog",
                                JOptionPane.INFORMATION_MESSAGE);
                        return;
                    } else {
                        System.out.println("XMS Video port:" + this.getPort());
                        URL url = getClass().getResource("/rtptools_1_18_win_bin/rtpplay.exe");
                        System.out.println(url);
                        File file = new File(url.getPath());

                        int selectedColumnIndex = this.rtpdumpTable.getSelectedColumn();
                        String selectedObject = (String) this.rtpdumpTable.getModel().getValueAt(selectedrow, selectedColumnIndex);

                        System.out.println("IP ADDRESS RTP PLAY : " + this.getIpAdr());

                        String cmd = file + " -T -f " + rtpdumpMap.get(selectedObject) + " " + this.getIpAdr() + "/" + this.getPort();
                        System.out.println(cmd);

                        //String cmd = "C:\\Users\\ssatyana\\Documents\\NetBeansProjects\\Rtpplay\\src\\rtptools_1_18_win_bin\\rtpplay.exe -T -f C:\\Users\\ssatyana\\Documents\\NetBeansProjects\\Rtpplay\\src\\rtptools_1_18_win_bin\\first-rtpdump 146.152.64.141/57348";
                        Process p = Runtime.getRuntime().exec(cmd);
                        //p.waitFor();
                    }
                }
            } else {
                JOptionPane.showMessageDialog(new JFrame(), "Call not connected", "Dialog",
                        JOptionPane.ERROR_MESSAGE);
                return;
            }
        } catch (Exception ex) {
            Logger.getLogger(CallUIForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_rtpPlayActionPerformed

    /**
     * Updates the call text area with info requests sent and responses
     * received.
     *
     * @param message
     */
    public void updateRecievedMessage(String message) {
        responseTextArea.setText(responseTextArea.getText() + "\n" + timeStamp() + "\n" + message);
        DefaultCaret caret = (DefaultCaret) responseTextArea.getCaret();
        caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
    }

    public void updateCallTextArea(Response response) {
        CSeqHeader cSeq = (CSeqHeader) response.getHeader(CSeq.NAME);
        ToHeader toHeader = (ToHeader) response.getHeader("To");
        Address resToAddress = toHeader.getAddress();
        FromHeader fromHeader = (FromHeader) response.getHeader("From");
        Address resFromAddress = fromHeader.getAddress();
        switch (response.getStatusCode()) {
            case Response.OK:
                switch (cSeq.getMethod()) {
                    case Request.INVITE:
                        callTextArea.setText(callTextArea.getText() + "\n" + timeStamp() + "\nReceived "
                                + response.getStatusCode() + " OK for " + cSeq.getMethod() + " from "
                                + resToAddress + " to " + resFromAddress);
                        break;
                }
                break;
            case Response.TRYING:
                callTextArea.setText(callTextArea.getText() + "\n" + timeStamp() + "\nReceived "
                        + response.getStatusCode() + " TRYING for " + cSeq.getMethod() + " from "
                        + resToAddress + " to " + resFromAddress);
                break;
            case Response.RINGING:
                callTextArea.setText(callTextArea.getText() + "\n" + timeStamp() + "\nReceived "
                        + response.getStatusCode() + " RINGING for " + cSeq.getMethod() + " from "
                        + resToAddress + " to " + resFromAddress);
                break;
        }
    }

    public void updateCallTextArea() {
        callTextArea.setText(callTextArea.getText() + "\n" + timeStamp() + "\n" + Request.BYE);
        callButton.setEnabled(true);
        hangupButton.setEnabled(false);
        userText.setEnabled(true);
        addressText.setEnabled(true);
    }

    /**
     * Displays the requests and responses sent to and received from the XMS in
     * bridge mode. Information is displayed in the call tab.
     *
     * @param res
     * @param req
     */
    public void updateCallTextAreaBridgeXMS(Response res, Request req) {
        if (req != null) {
            ToHeader toHeader = (ToHeader) req.getHeader("To");
            Address reqToAddress = toHeader.getAddress();
            FromHeader fromHeader = (FromHeader) req.getHeader("From");
            Address reqFromAddress = fromHeader.getAddress();
            switch (req.getMethod()) {
                case Request.INVITE:
                    callTextArea.setText(callTextArea.getText() + "\n" + timeStamp()
                            + "\nSend INVITE request from " + reqFromAddress + " to " + reqToAddress);
                    break;
                case Request.ACK:
                    callTextArea.setText(callTextArea.getText() + "\n" + timeStamp()
                            + "\nSend ACK from " + reqFromAddress + " to " + reqToAddress);
                    break;
            }
        }
        if (res != null) {
            CSeqHeader cSeq = (CSeqHeader) res.getHeader(CSeq.NAME);
            ToHeader toHeader = (ToHeader) res.getHeader("To");
            Address resToAddress = toHeader.getAddress();
            FromHeader fromHeader = (FromHeader) res.getHeader("From");
            Address resFromAddress = fromHeader.getAddress();
            switch (res.getStatusCode()) {
                case Response.OK:
                    switch (cSeq.getMethod()) {
                        case Request.INVITE:
                            callTextArea.setText(callTextArea.getText() + "\n" + timeStamp() + "\nReceived "
                                    + res.getStatusCode() + " OK for " + cSeq.getMethod() + " from "
                                    + resToAddress + " to " + resFromAddress);
                            break;
                    }
                    break;
                case Response.TRYING:
                    callTextArea.setText(callTextArea.getText() + "\n" + timeStamp() + "\nReceived "
                            + res.getStatusCode() + " TRYING for " + cSeq.getMethod() + " from "
                            + resToAddress + " to " + resFromAddress);
                    break;
                case Response.RINGING:
                    callTextArea.setText(callTextArea.getText() + "\n" + timeStamp() + "\nReceived "
                            + res.getStatusCode() + " RINGING for " + cSeq.getMethod() + " from "
                            + resToAddress + " to " + resFromAddress);
                    break;
            }
        }
    }

    public void updateCallTextAreaWithCustomMessage(String reqFromAddress, String reqToAddress, String message) {
        if (message.equalsIgnoreCase("ACK")) {
            callTextArea.setText(callTextArea.getText() + "\n" + timeStamp()
                    + "\nSend ACK from " + reqFromAddress + " to " + reqToAddress);
        } else if (message.equalsIgnoreCase("RINGING")) {
            callTextArea.setText(callTextArea.getText() + "\n" + timeStamp()
                    + "\nSend 180 RINGING for INVITE from " + reqFromAddress + " to " + reqToAddress);
        } else if (message.equalsIgnoreCase("200OK")) {
            callTextArea.setText(callTextArea.getText() + "\n" + timeStamp()
                    + "\nSend 200 OK for INVITE from " + reqFromAddress + " to " + reqToAddress);
        }
    }

    /**
     * Displays the requests received and responses sent to the soft phone in
     * bridge mode. Information is displayed in the call tab.
     *
     * @param request
     * @param response
     */
    public void updateCallTextAreaBridgeMode(Request request, Response response) {
        if (request != null) {
            ToHeader toHeader = (ToHeader) request.getHeader("To");
            Address reqToAddress = toHeader.getAddress();
            FromHeader fromHeader = (FromHeader) request.getHeader("From");
            Address reqFromAddress = fromHeader.getAddress();
            switch (request.getMethod()) {
                case Request.INVITE:
                    callTextArea.setText(callTextArea.getText() + "\n" + timeStamp() + "\nReceived "
                            + request.getMethod() + " from " + reqFromAddress + " to " + reqToAddress + ":" + ReadFileUtility.getValue("port"));
                    break;
                case Request.OPTIONS:
                    callTextArea.setText(callTextArea.getText() + "\n" + timeStamp() + "\nReceived "
                            + request.getMethod() + " from " + reqFromAddress + " to " + reqToAddress);
                    break;
                case Request.ACK:
                    callTextArea.setText(callTextArea.getText() + "\n" + timeStamp() + "\nReceived "
                            + request.getMethod() + " from " + reqFromAddress + " to " + reqToAddress);
                    break;
            }
        }
        if (response != null) {
            CSeqHeader cSeq = (CSeqHeader) response.getHeader(CSeq.NAME);
            ToHeader toHeader = (ToHeader) response.getHeader("To");
            Address resToAddress = toHeader.getAddress();
            FromHeader fromHeader = (FromHeader) response.getHeader("From");
            Address resFromAddress = fromHeader.getAddress();
            switch (response.getStatusCode()) {
                case Response.OK:
                    switch (cSeq.getMethod()) {
                        case Request.INVITE:
                            callTextArea.setText(callTextArea.getText() + "\n" + timeStamp()
                                    + "\nSend 200 OK for INVITE from " + resToAddress + " to " + resFromAddress);
                            break;
                        case Request.OPTIONS:
                            callTextArea.setText(callTextArea.getText() + "\n" + timeStamp()
                                    + "\nSend 200 OK for OPTIONS from " + resToAddress + " to " + resFromAddress);
                            break;
                    }
                    break;
                case Response.TRYING:
                    callTextArea.setText(callTextArea.getText() + "\n" + timeStamp()
                            + "\nSend 100 TRYING for INVITE from " + resToAddress + " to " + resFromAddress);
                    break;
                case Response.RINGING:
                    callTextArea.setText(callTextArea.getText() + "\n" + timeStamp()
                            + "\nSend 180 RINGING for INVITE from " + resToAddress + " to " + resFromAddress);
                    break;
            }
        }
    }

    public boolean disableButtons() {
        callButton.setEnabled(false);
        hangupButton.setEnabled(false);
        return Boolean.FALSE;
    }

    private String timeStamp() {
        return new SimpleDateFormat("[HH:mm:ss.SSS] ").format(Calendar.getInstance().getTime());
    }

    private void displayInitialMessage() {
        try {
//            List<String> lines = ReadFileUtility.readFile();
//            String port = null;
//            for (int i = 1; i < lines.size(); i += 2) {
//                port = lines.get(i);
//            }
            callTextArea.setText("Waiting for call at " + Inet4Address.getLocalHost().getHostAddress() + ":" + Integer.parseInt(ReadFileUtility.getValue("port")) + "...");

        } catch (UnknownHostException ex) {
            logger.log(Level.SEVERE, ex.getMessage(), ex);
        }
    }

    public String getUserTextFieldValue() {
        return this.userText.getText();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel addressLabel;
    private javax.swing.JTextField addressText;
    private javax.swing.JButton callButton;
    private javax.swing.JPanel callPanel;
    private javax.swing.JTextArea callTextArea;
    private javax.swing.JButton clearButton;
    private javax.swing.JButton clearResponseButton;
    private javax.swing.JButton fileButton;
    private javax.swing.JTextField fileTextField;
    private javax.swing.JButton hangupButton;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JComboBox msmlComboBox;
    private javax.swing.JLabel msmlScriptLabel;
    private javax.swing.JTextArea msmlTextArea;
    private javax.swing.JLabel responseLabel;
    private javax.swing.JTextArea responseTextArea;
    private javax.swing.JButton rtpPlay;
    private javax.swing.JTable rtpdumpTable;
    private javax.swing.JButton saveMsmlScriptButton;
    private javax.swing.JButton saveResponseButton;
    private javax.swing.JButton sendMsmlButton;
    private javax.swing.JButton uploadFile;
    private javax.swing.JLabel userLabel;
    private javax.swing.JTextField userText;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the port
     */
    public String getPort() {
        return this.port;
    }

    /**
     * @param port the port to set
     */
    public void setPort(String port) {
        this.port = port;
    }

    /**
     * @return the ipAdr
     */
    public String getIpAdr() {
        return this.ipAdr;
    }

    /**
     * @param ipAdr the ipAdr to set
     */
    public void setIpAdr(String ipAdr) {
        this.ipAdr = ipAdr;
    }
}
